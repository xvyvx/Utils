name: build
on: [push, pull_request]
jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        include: 
          - os: ubuntu-20.04
            toolset: gcc
            toolset-c: gcc
            toolset-cxx: g++
            toolset-version: 10
            configuration: Debug
          - os: ubuntu-20.04
            toolset: gcc
            toolset-c: gcc
            toolset-cxx: g++
            toolset-version: 10
            configuration: Release
          - os: ubuntu-20.04
            toolset: llvm
            toolset-c: clang
            toolset-cxx: clang++
            toolset-version: 14
            configuration: Debug
          - os: ubuntu-20.04
            toolset: llvm
            toolset-c: clang
            toolset-cxx: clang++
            toolset-version: 14
            configuration: Release
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies(Others)
        run: |
            sudo apt-get update -qq
            sudo apt-get -qq install -y libbsd-dev socat
      - name: Install dependencies(Clang specific)
        id: clang_specific_ctx
        if: ${{ matrix.toolset-c == 'clang' }}
        run: |
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
            sudo -E apt-add-repository -y "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"
            sudo apt-get update -qq
            sudo apt-get -qq install -y clang-14 lld-14 libc++-14-dev libc++abi-14-dev libunwind-14-dev llvm
            echo "::set-output name=clang_compile_flags::-stdlib=libc++"
            echo "::set-output name=clang_link_flags::-fuse-ld=lld --rtlib=compiler-rt -lunwind"
      - name: Install dependencies(gcc specific)
        id: gcc_specific_ctx
        if: ${{ matrix.toolset-c == 'gcc' && matrix.configuration == 'Debug' }}
        run: sudo apt-get -qq install -y lcov
      - name: Install dependencies(Boost)
        run: |
            export THIRD_DIR="$GITHUB_WORKSPACE/3rd"
            mkdir -p $THIRD_DIR && cd $THIRD_DIR
            wget --no-check-certificate --quiet \
              https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.tar.bz2
            tar xjf ./boost_1_78_0.tar.bz2 && cd ./boost_1_78_0/ && ./bootstrap.sh
            echo "using ${{ matrix.toolset-c }} : : ${{ matrix.toolset-cxx }}-${{ matrix.toolset-version }} ;" >> ~/user-config.jam
            ./b2 stage --toolset=${{ matrix.toolset-c }} cflags="-fPIC" \
              cxxflags="-std=c++14 -fPIC ${{ steps.clang_specific_ctx.outputs.clang_compile_flags }}" \
              linkflags="-fPIC ${{ steps.clang_specific_ctx.outputs.clang_link_flags }}" \
              --with-system --with-thread --with-regex --with-filesystem --with-program_options \
              --with-atomic --with-date_time --with-test --with-timer \
              --stagedir="./stage" link=static runtime-link=shared threading=multi --layout=versioned \
              variant=$(tr 'A-Z' 'a-z'<<<"${{ matrix.configuration }}")
      - name: Install dependencies(log4cplus)
        run: |
            cd $GITHUB_WORKSPACE/3rd
            wget --no-check-certificate --quiet https://github.com/log4cplus/log4cplus/archive/REL_1_2_0.zip
            unzip -q REL_1_2_0.zip
            cd log4cplus-REL_1_2_0 && mkdir build && cd build
            cmake -DCMAKE_C_COMPILER=${{ matrix.toolset-c }}-${{ matrix.toolset-version }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.toolset-cxx }}-${{ matrix.toolset-version }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} \
              -DCMAKE_CXX_FLAGS="-std=c++14 ${{ steps.clang_specific_ctx.outputs.clang_compile_flags }}" \
              -DCMAKE_SHARED_LINKER_FLAGS="${{ steps.clang_specific_ctx.outputs.clang_link_flags }}" \
              -DLOG4CPLUS_BUILD_TESTING=OFF -DLOG4CPLUS_BUILD_LOGGINGSERVER=OFF ..
            make && sudo make install
      - name: Install dependencies(otl)
        run: |
            cd $GITHUB_WORKSPACE/3rd
            mkdir otl && cd otl && wget -q http://otl.sourceforge.net/otlv4_h2.zip && unzip -q otlv4_h2.zip
      - name: Build
        run: |
            mkdir $GITHUB_WORKSPACE/build && cd $GITHUB_WORKSPACE/build
            cmake -DNativeToolchainVersion=${{ matrix.toolset-version }} \
              -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/CMake/${{ matrix.toolset }}-x86_64-linux-gnu.cmake" \
              -Dotl_INCLUDEDIR=$GITHUB_WORKSPACE/3rd -Dotl_VERSION_MAJOR=4 \
              -DCMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/3rd/boost_1_78_0/stage" -DBoost_USE_STATIC_LIBS=ON \
              -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} \
              -DCMAKE_MAKE_PROGRAM=make ..
            make && sudo make install
      - name: Test
        if: ${{ success() }}
        run: |
          sudo ldconfig
          cd $GITHUB_WORKSPACE/build
          ctest --output-on-failure
      - name: Generate code coverage data
        if: ${{ matrix.toolset-c == 'gcc' && matrix.configuration == 'Debug' && success() }}
        run: |
          cd $GITHUB_WORKSPACE/build && lcov -b $GITHUB_WORKSPACE -d . -c -o ./all_cov.info
          lcov --extract all_cov.info '*/Utils/Utils/Utils/*' -o ./lcov.info
      - name: Code coverage data upload
        if: ${{ matrix.toolset-c == 'gcc' && matrix.configuration == 'Debug' && success() }}
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ github.workspace }}/build/lcov.info
  
  windows:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022]
        toolset: [v143]
        boost-toolset: [msvc-14.3]
        configuration: [Debug, Release]
        arch: [Win32, x64]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies(Boost)
        shell: powershell
        run: |
            $THIRD_DIR="$env:GITHUB_WORKSPACE\3rd"
            (mkdir $THIRD_DIR) -and (cd $THIRD_DIR)
            aria2c.exe https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.zip
            7z x boost_1_78_0.zip
            cd .\boost_1_78_0
            .\bootstrap.bat
            .\b2.exe stage --toolset=${{ matrix.boost-toolset }} `
              --with-system --with-thread --with-regex --with-filesystem --with-program_options `
              --with-atomic --with-date_time --with-test --with-timer `
              --stagedir=".\stage" link=static runtime-link=shared threading=multi `
              address-model=$(if ("${{ matrix.arch }}" -eq "Win32") { "32" } else { "64" }) `
              variant=$("${{ matrix.configuration }}".toLower())
      - name: Install dependencies(log4cplus)
        shell: powershell
        run: |
            cd $env:GITHUB_WORKSPACE\3rd
            aria2c.exe https://github.com/log4cplus/log4cplus/archive/REL_1_2_0.zip
            7z x log4cplus-REL_1_2_0.zip
            cd log4cplus-REL_1_2_0
            mkdir build
            cd build
            cmake -G "Visual Studio 17 2022" -A "${{ matrix.arch }}" -T "${{ matrix.toolset }}" `
              -DCMAKE_CONFIGURATION_TYPES=${{ matrix.configuration }} -D_WIN32_WINNT=0x0601 -DUNICODE=OFF `
              -DLOG4CPLUS_BUILD_TESTING=OFF -DLOG4CPLUS_BUILD_LOGGINGSERVER=OFF ..
            cmake --build . --config ${{ matrix.configuration }}
            cp .\src\${{ matrix.configuration }}\*.lib .\bin\${{ matrix.configuration }}
      - name: Install dependencies(otl)
        shell: powershell
        run: |
            cd $env:GITHUB_WORKSPACE\3rd
            mkdir otl
            cd otl
            aria2c.exe http://otl.sourceforge.net/otlv4_h2.zip
            7z x otlv4_h2.zip
      - name: Build
        shell: powershell
        run: |
            cd $env:GITHUB_WORKSPACE
            mkdir build
            cd build
            cmake -G "Visual Studio 17 2022" -A "${{ matrix.arch }}" -T "${{ matrix.toolset }}" `
              -DCMAKE_CONFIGURATION_TYPES=${{ matrix.configuration }} `
              -Dotl_INCLUDEDIR="$env:GITHUB_WORKSPACE\3rd" -Dotl_VERSION_MAJOR=4 `
              -DCMAKE_PREFIX_PATH="$env:GITHUB_WORKSPACE\3rd\boost_1_78_0\stage" -DBoost_USE_STATIC_LIBS=ON `
              -Dlog4cplus_INCLUDEDIR="$env:GITHUB_WORKSPACE\3rd\log4cplus-REL_1_2_0\include" `
              -Dlog4cplus_LIBRARYDIR="$env:GITHUB_WORKSPACE\3rd\log4cplus-REL_1_2_0\build\bin" `
              -DCMAKE_C_FLAGS="/source-charset:utf-8 /execution-charset:utf-8" `
              -DCMAKE_CXX_FLAGS="/source-charset:utf-8 /execution-charset:utf-8 /EHsc" ..
            cmake --build . --config ${{ matrix.configuration }}
      - name: Test
        if: ${{ success() }}
        shell: powershell
        run: |
          cd $env:GITHUB_WORKSPACE\build
          cp $env:GITHUB_WORKSPACE\3rd\log4cplus-REL_1_2_0\build\bin\${{ matrix.configuration }}\*.dll `
            .\bin\${{ matrix.configuration }}
          ctest --build-config ${{ matrix.configuration }} --output-on-failure
    
