include_guard(DIRECTORY)

include(${CMAKE_CURRENT_LIST_DIR}/../Toolchain/ToolchainHelper.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/../Common/ParamHelper.cmake)

function(SetTargetPropertyWithValue target propertyName)
    if(${ARGC} EQUAL 3)
        set_target_properties(${target} PROPERTIES ${propertyName} ${ARGV2})
    endif()
endfunction()

function(SetTargetDefinitionWithValue target defType)
    foreach(defVar ${ARGN})
        list(APPEND definitionValues -D${defVar})
    endforeach()
    target_compile_definitions(${target} ${defType} ${definitionValues})
endfunction()

macro(SetTargetDefinitions target defType valueNamePrefix)
    foreach(setValueIndex RANGE 0 ${${valueNamePrefix}_index})
        if(DEFINED ${valueNamePrefix}_${setValueIndex}_COND_0)
            set(tempUserCond ${${valueNamePrefix}_${setValueIndex}_COND_0})
        elseif(DEFINED ${valueNamePrefix}_${setValueIndex}_Default_0)
            set(tempUserCond TRUE)
        else()
            set(tempUserCond FALSE)
        endif()
        if(${tempUserCond})
            SetTargetDefinitionWithValue(${target} ${defType} ${${valueNamePrefix}_${setValueIndex}_Default_0})
        endif()
    endforeach()
endmacro()

macro(SetTargetIncludes target incType valueNamePrefix)
    foreach(setValueIndex RANGE 0 ${${valueNamePrefix}_index})
        if(DEFINED ${valueNamePrefix}_${setValueIndex}_COND_0)
            set(tempUserCond ${${valueNamePrefix}_${setValueIndex}_COND_0})
        elseif(DEFINED ${valueNamePrefix}_${setValueIndex}_Default_0)
            set(tempUserCond TRUE)
        else()
            set(tempUserCond FALSE)
        endif()
        if(${tempUserCond})
            target_include_directories(${target} ${incType} ${${valueNamePrefix}_${setValueIndex}_Default_0})
        endif()
    endforeach()
endmacro()

macro(SetTargetCompileOpts target optType valueNamePrefix)
    foreach(setValueIndex RANGE 0 ${${valueNamePrefix}_index})
        if(DEFINED ${valueNamePrefix}_${setValueIndex}_COND_0)
            set(tempUserCond ${${valueNamePrefix}_${setValueIndex}_COND_0})
        elseif(DEFINED ${valueNamePrefix}_${setValueIndex}_Default_0)
            set(tempUserCond TRUE)
        else()
            set(tempUserCond FALSE)
        endif()
        if(${tempUserCond})
            target_compile_options(${target} ${optType} ${${valueNamePrefix}_${setValueIndex}_Default_0})
        endif()
    endforeach()
endmacro()

macro(SetTargetDeps target depType valueNamePrefix)
    foreach(setValueIndex RANGE 0 ${${valueNamePrefix}_index})
        if(DEFINED ${valueNamePrefix}_${setValueIndex}_COND_0)
            set(tempUserCond ${${valueNamePrefix}_${setValueIndex}_COND_0})
        elseif(DEFINED ${valueNamePrefix}_${setValueIndex}_Default_0)
            set(tempUserCond TRUE)
        else()
            set(tempUserCond FALSE)
        endif()
        if(${tempUserCond})
            target_link_libraries(${target} ${depType} ${${valueNamePrefix}_${setValueIndex}_Default_0})
        endif()
    endforeach()
endmacro()

macro(ParseNewTargetParam extRootArgKeywords)
    set(Root_Keywords "COVERAGE_BUILD" "SRC" "DEPS" "PRIVATE_DEFS" "PRIVATE_INC" "PRIVATE_OPTS"
        ${extRootArgKeywords})
    set(Root_DEPS_Keywords "COND")
    set(Root_PRIVATE_DEFS_Keywords "COND")
    set(Root_PRIVATE_INC_Keywords "COND")
    set(Root_PRIVATE_OPTS_Keywords "COND")
    ParseStructuredLevelParameters("Root" "Root" "${ARGN}")
endmacro()

macro(SetTargetAttribute targetName)
    EnableGNUStyleStrip(TARGET ${targetName})
    SetTargetPropertyWithValue(${targetName} VERSION ${Root_VER_0})
    SetTargetPropertyWithValue(${targetName} SOVERSION ${Root_SOVER_0})
    SetTargetDefinitions(${targetName} PUBLIC "Root_PUBLIC_DEFS")
    SetTargetDefinitions(${targetName} INTERFACE "Root_INTERFACE_DEFS")
    SetTargetDefinitions(${targetName} PRIVATE "Root_PRIVATE_DEFS")
    SetTargetIncludes(${targetName} PUBLIC "Root_PUBLIC_INC")
    SetTargetIncludes(${targetName} INTERFACE "Root_INTERFACE_INC")
    SetTargetIncludes(${targetName} PRIVATE "Root_PRIVATE_INC")
    SetTargetCompileOpts(${targetName} PUBLIC "Root_PUBLIC_OPTS")
    SetTargetCompileOpts(${targetName} INTERFACE "Root_INTERFACE_OPTS")
    SetTargetCompileOpts(${targetName} PRIVATE "Root_PRIVATE_OPTS")
    SetTargetDeps(${targetName} PUBLIC "Root_DEPS")
    target_compile_features(${targetName} PUBLIC cxx_std_14)
    if(UNIX)
        target_compile_options(${targetName} PRIVATE -Wall) 
    elseif(WIN32)
        target_compile_options(${targetName} PRIVATE "/source-charset:utf-8")
        target_compile_definitions(${targetName} PUBLIC -D_WIN32_WINNT=0x0600 PRIVATE -D_SCL_SECURE_NO_WARNINGS)
        target_compile_options(${targetName} PRIVATE $<$<OR:$<CONFIG:RELEASE>,$<CONFIG:MINSIZEREL>,$<CONFIG:RELWITHDEBINFO>>:/GL>)
        set_property(TARGET ${targetName} APPEND PROPERTY LINK_FLAGS_RELEASE " /LTCG /OPT:REF")
        set_property(TARGET ${targetName} PROPERTY LINK_FLAGS_MINSIZEREL " /LTCG /OPT:REF")
        set_property(TARGET ${targetName} PROPERTY LINK_FLAGS_RELWITHDEBINFO " /LTCG /OPT:REF")
    else()
        message(FATAL_ERROR "Unsupported platform.")
    endif()
endmacro()

function(AddExecutableTarget targetName)
    ParseNewTargetParam("VER;SOVER" ${ARGN})
    add_executable(${targetName} ${Root_SRC_0})
    SetTargetAttribute(${targetName})
    if(DEFINED Root_COVERAGE_BUILD_0)
        EnableCodeCoverageBuild(TARGET ${targetName})
    endif()
endfunction()

function(AddSharedLibraryTarget targetName)
    set(extRootKeywords "VER;SOVER;PUBLIC_DEFS;INTERFACE_DEFS;PUBLIC_INC;INTERFACE_INC;PUBLIC_OPTS;INTERFACE_OPTS")
    set(Root_PUBLIC_DEFS_Keywords "COND")
    set(Root_INTERFACE_DEFS_Keywords "COND")
    set(Root_PUBLIC_INC_Keywords "COND")
    set(Root_INTERFACE_INC_Keywords "COND")
    set(Root_PUBLIC_OPTS_Keywords "COND")
    set(Root_INTERFACE_OPTS_Keywords "COND")
    ParseNewTargetParam("${extRootKeywords}" ${ARGN})
    add_library(${targetName} SHARED ${Root_SRC_0})
    string(TOUPPER ${targetName} upperTargetName)
    set_target_properties(${targetName} PROPERTIES CXX_VISIBILITY_PRESET hidden VISIBILITY_INLINES_HIDDEN ON
        DEFINE_SYMBOL "${upperTargetName}_EXPORTS")
    target_compile_definitions(${targetName} INTERFACE "${upperTargetName}_IMPORTS")
    SetTargetAttribute(${targetName})
    if(DEFINED Root_COVERAGE_BUILD_0)
        EnableCodeCoverageBuild(TARGET ${targetName})
    endif()
endfunction()

function(AddStaticLibraryTarget targetName)
    set(extRootKeywords "PUBLIC_DEFS;INTERFACE_DEFS;PUBLIC_INC;INTERFACE_INC;PUBLIC_OPTS;INTERFACE_OPTS")
    set(Root_PUBLIC_DEFS_Keywords "COND")
    set(Root_INTERFACE_DEFS_Keywords "COND")
    set(Root_PUBLIC_INC_Keywords "COND")
    set(Root_INTERFACE_INC_Keywords "COND")
    set(Root_PUBLIC_OPTS_Keywords "COND")
    set(Root_INTERFACE_OPTS_Keywords "COND")
    ParseNewTargetParam("${extRootKeywords}" ${ARGN})
    add_library(${targetName} STATIC ${Root_SRC_0})
    SetTargetAttribute(${targetName})
endfunction()

function(AddSubDirectory)
    foreach(dirSetValueIndex RANGE 0 ${Root_DIR_index})
        unset(Root_DIR_${dirSetValueIndex})
        foreach(dirCondSetValueIndex RANGE 0 ${Root_DIR_${dirSetValueIndex}_COND_index})
            unset(Root_DIR_${dirSetValueIndex}_COND_${dirCondSetValueIndex})
        endforeach()
        unset(Root_DIR_${dirSetValueIndex}_COND_index)
        foreach(dirDefaultSetValueIndex RANGE 0 ${Root_DIR_${dirSetValueIndex}_Default_index})
            unset(Root_DIR_${dirSetValueIndex}_Default_${dirDefaultSetValueIndex})
        endforeach()
        unset(Root_DIR_${dirSetValueIndex}_Default_index)
    endforeach()
    unset(Root_DIR_index)
    set(Root_Keywords "DIR")
    set(Root_DIR_Keywords "COND")
    ParseStructuredLevelParameters("Root" "Root" "${ARGN}")
    foreach(setValueIndex RANGE 0 ${Root_DIR_index})
        if(DEFINED Root_DIR_${setValueIndex}_COND_0)
            set(tempUserCond ${Root_DIR_${setValueIndex}_COND_0})
        elseif(DEFINED Root_DIR_${setValueIndex}_Default_0)
            set(tempUserCond TRUE)
        else()
            set(tempUserCond FALSE)
        endif()
        if(${tempUserCond})
            foreach(dir ${Root_DIR_${setValueIndex}_Default_0})
                add_subdirectory(${dir})
            endforeach()
        endif()
    endforeach()
endfunction()